#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>

typedef struct MSG{
	int value;
	char tipo[20];
}MSGI;

int main(int argc, char* argv[]){

/*
AF_INET: Address family per ipv4
SOCK_STREAM: Socket che utilizza il protocollo TCP

*/
	int server_sock;
        struct sockaddr_in server, client;
	int length;
        int complete_socket;
	MSGI msg;

	server_sock = socket(AF_INET, SOCK_STREAM, 0);		// lo 0 indica il protocollo IP.
        if(server_sock < 0){
		perror("Creazione della socket -> Errore");
		exit(-1);
	}
	
	// associamo al "mezzo socket" l'ip e la porta
        
	server.sin_family = AF_INET;
	server.sin_addr.s_addr = INADDR_ANY; 	// equivalente a 0.0.0.0
        server.sin_port = htons(SERVER_PORT);	// costante che viene presa da chat.h, htons() serve per converte l'intero in byte.

	if(bind(server_sock, (struct sockaddr *)&server, sizeof(server)) < 0){
		perror("Binding server -> Errore");
                exit(-1);
	}
	
 	if(getsockname(server_sock, (struct sockaddr *) server, sizeof(length)) < 0 ){
		perror("Errore con getsockname()");
		exit(-1);
	}

	if(listen(server_sock, 1) < 0){
		perror("Listen -> Errore");
		exit(-1);
	}
	

	while(1){
		complete_socket = accept(server_sock, (struct sockaddr *)&client, (socklen_t *)&length);
		if(complete_socket < 0){
			perror("Errore accept");
			exit(-1);
		}
		// gestiamo la connessione
		if(read(complete_socket, &msg, sizeof(msg)) < 0){
			perror("Read -> Errore");
			exit(-1);
		}
		
		printf("Client: %s\n", msg.tipo);
		close(complete_socket);
	}
	

        return 0;


}
