Lo scopo del programma è quello di sommare tutti i valori con la virgola presenti nei file di nome cash{n}, dove n rappresenta il numero
del file(inizia da 0). La struttura dei file è la seguente, supponiamo di avere il primo file:

Nome: cash0
Contenuto:

dd/mm/yyyy x

Questa rappresenta una delle tante righe presente nei file, dove x rappresenta il numero con la virgola.

Per poter fare la somma dei file, associo ad un thread un file e quel thread si occuperà della somma di quel singolo file. Questo approccio
lo applico per tutti i file che ho. Quindi se ho 3 file, eseguirò 3 thread ognuno dei quali avrà associato il corrispettivo file.

Nome script: generateFiles.sh
Questo script si occupa di generare i file, come dati usa la data di oggi in formato dd/mm/yyyy e un numero randomico con la virgola.
Lo script accetta due parametri da riga di comando:
       1) Numero di file da creare
       2) Numero di righe di ogni file.
I valori devono essere strattamente maggiori di 0.

Nome classe: Worker.java

Questa classe implementa l'interfaccia Runnable, ossia quell'Interfaccia che contiene il prototipo del metodo che eseguiranno i vari thread.
Dentro la classe Worker troveremo la risorsa comune a tutti i thread(money), un semaforo binario(mutex) al fine di gestire l'accesso alle risorse
e infine un dato di tipo char che rappresenta il numero dei file che deve scorrere quel thread(nFile), ad esempio se nFile è 0 quel thread
leggerà l'intero file di nome cash0. Worker prevede un costruttore parametrico dove accetta un dato di tipo char che verrà assegnato all'attributo
nFile. All'intero della definizione del metodo run, costruisco il percorso del file. Per farlo, prima di tutto, ottengo la posizione corrente
del filesystem nella working directory e infine al nome del file, ecco qui che ci serve nFile:
						System.getProperty("user.dir")+"/cash"+nFile

Infine scorro il file con un oggetto di tipo Scanner e sommo i valori con la virgola. Per estrarre i valori con la virgola dalla riga, effettuo
lo split, ossia la suddivisione di una stringa a partire da un separatore. Per esempio:

							26/04/2024 11.44
se effettuo lo split avendo come separatore lo spazio ottengo un array:

							{"26/04/2024", "11.44"}
Non resta che passare come argomento a Double.parseDouble(String) il secondo elemento di questo array, così posso aggiornare la risorsa condivisa ai thread, ossia la somma totale dei file.

La parte di codice dove aggiorno la risorsa condivisa ai thread è la Sezione Critica, qui ci servirà l'uso del semaforo che abbiamo inizializzato all'inizio della classe.

Quindi tra la sezione critica effettuo le operazione di lock e unlock, nel caso della classe utilizzata .acquire() e .release()

N.B.
Dato che sto sfruttando la OOP per risolvere questo problema, le risorse globali non sono le variabili globali ad una funzione, come nella programmazione funzionale.
Bensì gli attributi statici, se un attributo viene dichiarato con l'attributo statico è detto attributo di classe, ossia un attributo
indipendente dalla presenza di istanze alle classe e convidiviso a tutte le istanze.


Nome classe: BankSyncModified.java

Questa classe si occuperà di creare i Thread. Il costruttore di questa classe prevede un array di String come parametro. Questo perchè ho previsto l'uso dei varargs.

Il metodo che si occupa di verificare e di estrarre, se possibile, il numero di thread è .setNThread(). Prevede un costrutto try-catch, all'interno del try
controllo se la lunghezza dell'array è uguale a 0 oppure se l'elemento alla prima posizione è <= 0, se questa condizione è vera
sollevo, esplicitamente un eccezione. Se è falsa assegno il numero di thread all'attributo di istanza.

Nella classe è presente un metodo privato, .createThreads() dove all'interno, prima di creare i thread, azzero la loro futura risorsa condivisa.
Questo perchè se istanzio più volte questa classe, i thread avranno la risorsa condivisa non a impostata a 0 ma impostata al valore modificato
dai thread precedenti.

All'interno di questo metodo, dentro un for per quanti sono i thread, istanzio un oggetto worker e lo passo all'i-esimo thread. Infine faccio
partire l'esecuzione dei thread.

N.B.
Nel for è presente questa riga:
						Worker work = new Worker(i.toString().charAt(0));

Il for ha come contatore locale un oggetto di tipo Integer, così da poter convertire il valore intero in Stringa, e successivamente in carattere,
in modo tale da poterlo passare come argomento al costruttore di worker.

 

Assieme a questa documentazione è presente una l'esportazione del progetto in javadoc.


Nome: Ignazio Leonardo Calogero Sperandeo
Classe: 4C Informatica.
Data: 26/04/2024

