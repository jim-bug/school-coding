# Author: Ignazio Leonardo Calogero Sperandeo
# Date: 09/10/2024
# Project: Macro to compute RSA keys with libreoffice calc
# by jim_bug // :)

from random import randint
import uno

def get_prime(z):
    c = 3
    while True:
        pri = randint(2, z)
        prime = True
        if pri < 2 or pri % 2 == 0 or pri % 3 == 0:
            continue
        if pri == 2 or pri == 3:
            break
        while c <= (pri**0.5):
            if pri % c == 0:
                prime = False
                break
            c += 2
        if prime:
            break
    return pri

def extended_euclidean(a, m):
    """Restituisce l'inverso moltiplicativo di a modulo m. Utilizzando l'agoritmo esteso di euclide"""
    x0, x1, y0, y1 = 1, 0, 0, 1
    original_m = m

    while m != 0:
        q = a // m
        a, m = m, a % m
        x0, x1 = x1, x0 - q * x1
        y0, y1 = y1, y0 - q * y1

    if x0 < 0:
        x0 += original_m

    return x0 if a == 1 else None


def set_alphabet():
    alphabet = {}
    j = 1
    for i in range(65, 91):
        key = chr(i)
        if key not in ['X', 'Y', 'K', 'J']:     # according to book
            alphabet[key] = j
            j += 1
    return alphabet


def main():
    # metodi riguardanti la dichiarazione di un documento libreoffice calc
    ctx = uno.getComponentContext()
    smgr = ctx.ServiceManager
    desktop = smgr.createInstanceWithContext("com.sun.star.frame.Desktop", ctx)
    doc = desktop.getCurrentComponent()

    if not doc:
        return
    alphabet = set_alphabet()
    sheet = doc.Sheets.getByIndex(0)        # ottengo il documento
    for i in [4, 5, 7, 8]:
        sheet.getCellByPosition(1, i).String = ""

    z = int(sheet.getCellByPosition(1, 3).Value)        # converto a int() per non avere la parte decimale
    n = int(sheet.getCellByPosition(1, 2).Value)
    text = sheet.getCellByPosition(1, 6).String
    pri = get_prime(z)
    pub = int(extended_euclidean(pri, z))
    encrypt_text = [str(alphabet[i] ** pub % n) for i in text]
    decrypt_text = []

    # Ricerca della chiave a partire da un valore del dizionario, necessario per convertire il codice decriptato in testo.
    for i in encrypt_text:
        for key, value in alphabet.items():
            val = int(i) ** pri % n
            if alphabet[key] == val:
                decrypt_text.append(key)
                break
    decrypt_text = "".join(decrypt_text)
    # decrypt_text = "".join([list(alphabet.keys())[list(alphabet.values()).index(int(i) ** pri % n)] for i in encrypt_text])     # guarda il file ricercaPerValore.txt

    # scrivo sulle celle tutti i valori trovati.
    cell_pri = sheet.getCellByPosition(1, 4)
    cell_pub = sheet.getCellByPosition(1, 5)
    cell_encrypt_text = sheet.getCellByPosition(1, 7)
    cell_decrypt_text = sheet.getCellByPosition(1, 8)
    cell_encrypt_text.String = ",".join(encrypt_text)
    cell_decrypt_text.String = decrypt_text
    cell_pri.String = f"({n}, {pri})"
    cell_pub.String = f"({n}, {pub})"

# // :) 

